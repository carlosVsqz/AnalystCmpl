/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.escod.compiler.flex;
import java_cup.runtime.Symbol;
import com.escod.compiler.cup.sym;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>C:/Users/admin/IdeaProjects/AnalystCmpl/src/main/jflex/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;
  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\5\2\6\1\5\22\0\1\3\1\41\1\7\2\0\1\44\1\37\1\0\1\45\1\46\1\36\1"+
    "\34\1\3\1\35\1\0\1\4\12\2\1\0\1\54\1\43\1\33\1\42\2\0\22\1\1\30\7\1\1\51\1"+
    "\0\1\52\1\0\1\1\1\0\1\16\1\10\1\14\1\25\1\13\1\24\1\23\1\15\1\27\2\1\1\20"+
    "\1\53\1\22\1\21\2\1\1\17\1\31\1\12\1\26\1\1\1\32\1\1\1\11\1\1\1\47\1\40\1"+
    "\50\7\0\1\6\242\0\2\6\26\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\12\2"+
    "\1\7\1\10\1\11\1\12\3\13\2\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\2\1\23\1\4"+
    "\1\24\10\2\1\25\1\2\1\26\2\2\1\14\1\27"+
    "\1\13\1\0\10\2\1\30\1\2\1\31\2\2\1\0"+
    "\1\2\1\32\1\33\1\34\4\2\1\3\1\35\1\2"+
    "\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\55\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u02d0"+
    "\0\u03de\0\u040b\0\u0357\0\u0438\0\55\0\55\0\55\0\55"+
    "\0\55\0\u0465\0\55\0\u0492\0\55\0\u04bf\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\132"+
    "\0\u0681\0\u06ae\0\55\0\55\0\55\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\132\0\u0870"+
    "\0\132\0\u089d\0\u08ca\0\u08f7\0\u0924\0\132\0\132\0\132"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\55\0\132\0\u0a05\0\132"+
    "\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\0\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\3\3\1\14\3\3"+
    "\1\15\1\16\1\3\1\17\1\20\1\3\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\56\0\2\3\5\0\23\3\20\0\1\3\3\0"+
    "\1\4\55\0\1\5\1\0\1\5\53\0\1\44\26\0"+
    "\1\45\22\0\2\3\5\0\1\3\1\46\21\3\20\0"+
    "\1\3\2\0\2\3\5\0\7\3\1\47\13\3\20\0"+
    "\1\3\2\0\2\3\5\0\10\3\1\50\12\3\20\0"+
    "\1\3\2\0\2\3\5\0\5\3\1\51\15\3\20\0"+
    "\1\3\2\0\2\3\5\0\11\3\1\52\11\3\20\0"+
    "\1\3\2\0\2\3\5\0\6\3\1\53\1\3\1\54"+
    "\1\55\11\3\20\0\1\3\2\0\2\3\5\0\11\3"+
    "\1\56\11\3\20\0\1\3\2\0\2\3\5\0\12\3"+
    "\1\57\1\3\1\60\6\3\20\0\1\3\2\0\2\3"+
    "\5\0\2\3\1\61\20\3\20\0\1\3\2\0\2\3"+
    "\5\0\5\3\1\62\15\3\20\0\1\3\34\0\1\63"+
    "\54\0\1\45\1\64\53\0\1\45\1\0\1\64\52\0"+
    "\1\45\60\0\1\65\55\0\1\65\47\0\1\63\6\0"+
    "\1\63\45\0\1\63\7\0\1\63\46\0\1\66\20\0"+
    "\2\3\5\0\6\3\1\67\14\3\20\0\1\3\1\0"+
    "\5\44\2\0\46\44\1\0\2\3\5\0\2\3\1\70"+
    "\20\3\20\0\1\3\2\0\2\3\5\0\16\3\1\71"+
    "\4\3\20\0\1\3\2\0\2\3\5\0\21\3\1\72"+
    "\1\3\20\0\1\3\2\0\2\3\5\0\6\3\1\73"+
    "\14\3\20\0\1\3\2\0\2\3\5\0\12\3\1\74"+
    "\10\3\20\0\1\3\2\0\2\3\5\0\10\3\1\75"+
    "\12\3\20\0\1\3\2\0\2\3\5\0\11\3\1\76"+
    "\11\3\20\0\1\3\2\0\2\3\5\0\7\3\1\77"+
    "\13\3\20\0\1\3\2\0\2\3\5\0\16\3\1\100"+
    "\4\3\20\0\1\3\2\0\2\3\5\0\2\3\1\101"+
    "\20\3\20\0\1\3\2\0\2\3\5\0\7\3\1\102"+
    "\13\3\20\0\1\3\2\0\2\3\5\0\17\3\1\103"+
    "\3\3\20\0\1\3\3\0\1\104\53\0\2\3\5\0"+
    "\17\3\1\105\3\3\20\0\1\3\2\0\2\3\5\0"+
    "\3\3\1\106\17\3\20\0\1\3\2\0\2\3\5\0"+
    "\3\3\1\107\17\3\20\0\1\3\2\0\2\3\5\0"+
    "\3\3\1\110\17\3\20\0\1\3\2\0\2\3\5\0"+
    "\7\3\1\106\13\3\20\0\1\3\2\0\2\3\5\0"+
    "\13\3\1\106\7\3\20\0\1\3\2\0\2\3\5\0"+
    "\21\3\1\71\1\3\20\0\1\3\2\0\2\3\5\0"+
    "\6\3\1\111\14\3\20\0\1\3\2\0\2\3\5\0"+
    "\1\112\22\3\20\0\1\3\2\0\2\3\5\0\17\3"+
    "\1\113\3\3\20\0\1\3\2\0\2\3\5\0\10\3"+
    "\1\114\12\3\20\0\1\3\3\0\1\104\43\0\1\115"+
    "\7\0\2\3\5\0\12\3\1\116\10\3\20\0\1\3"+
    "\2\0\2\3\5\0\2\3\1\106\20\3\20\0\1\3"+
    "\2\0\2\3\5\0\10\3\1\70\12\3\20\0\1\3"+
    "\2\0\2\3\5\0\12\3\1\117\10\3\20\0\1\3"+
    "\2\0\2\3\5\0\3\3\1\120\17\3\20\0\1\3"+
    "\2\0\2\3\5\0\13\3\1\121\7\3\20\0\1\3"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2610];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\25\1\5\11\1\1\1\11"+
    "\1\1\1\11\15\1\3\11\1\0\15\1\1\0\10\1"+
    "\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR, (int) yychar, yyline, yytext());
            }
            // fall through
          case 32: break;
          case 2:
            { return new Symbol(sym.Identificador, (int) yychar, yyline, yytext());
            }
            // fall through
          case 33: break;
          case 3:
            { return new Symbol(sym.Numero, (int) yychar, yyline, yytext());
            }
            // fall through
          case 34: break;
          case 4:
            { /*Ignore*/
            }
            // fall through
          case 35: break;
          case 5:
            { return new Symbol(sym.Division, (int) yychar, yyline, yytext());
            }
            // fall through
          case 36: break;
          case 6:
            { return new Symbol(sym.Comillas, (int) yychar, yyline, yytext());
            }
            // fall through
          case 37: break;
          case 7:
            { return new Symbol(sym.Igual, (int) yychar, yyline, yytext());
            }
            // fall through
          case 38: break;
          case 8:
            { return new Symbol(sym.Suma, (int) yychar, yyline, yytext());
            }
            // fall through
          case 39: break;
          case 9:
            { return new Symbol(sym.Resta, (int) yychar, yyline, yytext());
            }
            // fall through
          case 40: break;
          case 10:
            { return new Symbol(sym.Multiplicacion, (int) yychar, yyline, yytext());
            }
            // fall through
          case 41: break;
          case 11:
            { return new Symbol(sym.Op_logico, (int) yychar, yyline, yytext());
            }
            // fall through
          case 42: break;
          case 12:
            { return new Symbol(sym.Op_relacional, (int) yychar, yyline, yytext());
            }
            // fall through
          case 43: break;
          case 13:
            { return new Symbol(sym.Parentesis_a, (int) yychar, yyline, yytext());
            }
            // fall through
          case 44: break;
          case 14:
            { return new Symbol(sym.Parentesis_c, (int) yychar, yyline, yytext());
            }
            // fall through
          case 45: break;
          case 15:
            { return new Symbol(sym.Llave_a, (int) yychar, yyline, yytext());
            }
            // fall through
          case 46: break;
          case 16:
            { return new Symbol(sym.Llave_c, (int) yychar, yyline, yytext());
            }
            // fall through
          case 47: break;
          case 17:
            { return new Symbol(sym.Corchete_a, (int) yychar, yyline, yytext());
            }
            // fall through
          case 48: break;
          case 18:
            { return new Symbol(sym.Corchete_c, (int) yychar, yyline, yytext());
            }
            // fall through
          case 49: break;
          case 19:
            { return new Symbol(sym.P_coma, (int) yychar, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 20:
            { return new Symbol(sym.Op_atribucion, (int) yychar, yyline, yytext());
            }
            // fall through
          case 51: break;
          case 21:
            { return new Symbol(sym.Do, (int) yychar, yyline, yytext());
            }
            // fall through
          case 52: break;
          case 22:
            { return new Symbol(sym.If, (int) yychar, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 23:
            { return new Symbol(sym.Op_incremento, (int) yychar, yyline, yytext());
            }
            // fall through
          case 54: break;
          case 24:
            { return new Symbol(sym.For, (int) yychar, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 25:
            { return new Symbol(sym.Int, (int) yychar, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 26:
            { return new Symbol(sym.T_dato, (int) yychar, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 27:
            { return new Symbol(sym.Op_booleano, (int) yychar, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 28:
            { return new Symbol(sym.Else, (int) yychar, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 29:
            { return new Symbol(sym.Main, (int) yychar, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 30:
            { return new Symbol(sym.While, (int) yychar, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 31:
            { return new Symbol(sym.Cadena, (int) yychar, yyline, yytext());
            }
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
